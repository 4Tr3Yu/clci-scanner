---
import Protected from '../../layouts/Protected.astro';
---
<Protected title="CLCI Scanner - jsqr" description="Scanner for Chilean documents">
	<div class="w-full  flex justify-center flex-col items-center pt-16">
		<div class="border border-emerald-900 mb-4 min-h-64 min-w-64">
			<video id="video" class="w-auto h-auto" autoplay></video>
		</div>
		<canvas id="canvas" class="hidden"></canvas>
		<button type="button"  class="text-emerald-500 px-4 py-2 border border-emerald-500 bg-emerald-950/75 rounded-full mb-4 hover:scale-105 duration-300 ease-in-out" id="start-qr">Start Scanning</button>
		<div class="hidden text-center" id="result">

		</div>
	</div>
</Protected>
<script src="/jsQR.js" is:inline></script>
<script>
	import type { ScanResult } from "../../lib/types";
	import { saveLog } from "../../lib/visitor-logs";
	import { decodeUrl } from "../../lib/scanner";
	
	const $ = (el: string) => document.querySelector(el); 

	const startBtn = $('#start-qr');
	const resultDiv = $('#result');
	const video = $('#video') as HTMLVideoElement;
	const canvas = $('#canvas') as HTMLCanvasElement;
	const ctx = canvas.getContext('2d');
	const loader = $('#loader');
	const loaderText = loader?.querySelector('#loader-msg');
	

	function renderResult(entries: { [key in keyof ScanResult]: string }) {
		if (resultDiv) {
			while (resultDiv.firstChild) {
				resultDiv.removeChild(resultDiv.firstChild);
			}
			for (const key in entries) {
				const containerElement = document.createElement('p');
				const keyElement = document.createElement('span');
				const valueElement = document.createElement('span');
				valueElement.classList.add('font-bold');
				keyElement.innerText = key + ': ';
				valueElement.innerText = entries[key as keyof ScanResult];
				containerElement.appendChild(keyElement);
				containerElement.appendChild(valueElement);
				resultDiv.appendChild(containerElement);
				resultDiv.classList.remove('hidden');
				video.classList.add('hidden');
			}
		}
	}

	async function handleResult(code: any) {
		
		const visitor = decodeUrl(code.data);
		console.log('QR data: ',visitor);

		

		try {
			const response =  await saveResults(resultData);
			if (response.status === 200) {
				console.log('Results saved: ', response);
				renderResult(resultData);
			}
		} catch (error) {
			showAlert('Error saving results', 'error');
			console.error('Error saving results: ', error);
		}
	}

	async function startStream() {
		video.classList.remove('hidden');
		const stream = await navigator.mediaDevices.getUserMedia({ video:{ facingMode: "environment" } });
		video.srcObject = stream;
		video.setAttribute("playsinline", "true");
		video.play();
		requestAnimationFrame(tick);
	}

	function tick() {
		if (video.readyState === video.HAVE_ENOUGH_DATA) {
			canvas.height = video.videoHeight;
			canvas.width = video.videoWidth;
			ctx?.drawImage(video, 0, 0, canvas.width, canvas.height);
			const imgData = ctx?.getImageData(0, 0, canvas.width, canvas.height);
			// @ts-ignore
			const code = jsQR(imgData.data, imgData.width, imgData.height);
			if (code && resultDiv) {
				console.log('QR data: ',code);	
				handleResult(code);
				//resultDiv.innerText = `QR Code Result: ${code.data}`;
				if (video.srcObject) {
					(video.srcObject as MediaStream).getTracks().forEach(track => track.stop());
				}
			}
		}
		requestAnimationFrame(tick);
	}

	startBtn?.addEventListener('click', startStream);
</script>